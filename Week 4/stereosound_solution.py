'''File: stereosound_solution.pyAuthors: compiled from classDescription: Imports sound file    Contains four functions    1)Removes vocals    2)Fades audio in    3)Fades audio out    4)Fades audio both in and out    Returns a copy of the sound object'''import sound#imports the sound file given to us def rem_vocals(snd):    '''    This function receives an object of type sound and removes the    vocals from the sound object and returns a copy.    '''    snd_copy = snd.copy()    #makes a copy of original sound object    for sample in snd_copy:    #this loop executes for each sample in the sound copy object        left = sample.get_left()        #gets the left value for the sound sample        right = sample.get_right()        #gets the right value for the sound sample        newvalue = (left-right)/2.0        #computes a new value by subtracting the right value from the        #left value and dividing it by two        newleft = sample.set_left(int(newvalue))        newright = sample.set_right(int(newvalue))        #makes the new value an integer        #sets the new value as the new left value for the sample        #sets the new value as the new right value for the sample    return snd_copy    #returns a copy of the modified sound object without vocalsdef fade_in(snd, fade_length):    '''    Receives an object of type sound.    Returns a modified copy of sound object with fade in effect by    gradually increasing the volume of the sound object.    '''    #makes a copy of original sound object    sndcopy = sound.Sound.copy(snd)        #loop executes for each sample in the sound copy object    for sample in sndcopy:                #As long as the sample's index is less than the fade length,        #the sample will be modified accordingly        if sample.get_index() < (fade_length):            #gets the right value for the sound sample            #gets the left value for the sound sample            right = sample.get_right()            left = sample.get_left()                        #newleft and newright are assigned a value that is a            #fraction of the original value. The fraction approaches            #the value 1.0 after each iteration.            newleft = int((float(sample.get_index()) / fade_length)\                          * left)            newright = int((float(sample.get_index()) / fade_length)\                           * right)            #sets the calculated value as the new right value            sample.set_right(newright)            #sets the calculated value as the new left value            sample.set_left(newleft)                return sndcopydef fade_out(snd, fade_length):    '''    This function receives an object of type sound and fades out by gradually    decreasing the volume of the sound object and returns a copy.    '''    sndcopy = snd.copy()#create a copy of the sound        #establish value where the fade will start.    start_fade = len(sndcopy) - (fade_length)        #takes fade_length and shifts the value so that numerator of fade    #factor starts correctly.    n = float(fade_length - 1)        for sample in sndcopy:                #As long as the sample's index is greater than or equal to the        #start fade position, the sample will be modified accordingly.        if sample.get_index() >= start_fade:            #gets the right value for the sound sample            #gets the left value for the sound sample            right = sample.get_right()            left = sample.get_left()                        #newleft and newright are assigned a value that is a            #fraction of the original value. The fraction goes to 0            #after each iteration.             newleft = int(( n / fade_length) * left)            newright = int(( n / fade_length) * right)            #subtract 1.0 after each iteration to make the fade            #factor go to 0.            n -= 1.0             #sets the calculated value as the new right sample value            #sets the calculated value as the new left sample value            sample.set_right(newright)            sample.set_left(newleft)    return sndcopy            def fade(snd, fade_length):    '''    This function receives an object of type sound and returns a copy    of sound object with fade in and fade out.    '''        snd_copy = sound.Sound.copy(snd)    #creates a copy of the sound object    snd_copy = fade_in(snd_copy, fade_length)    #calls the function fade_in to modify snd_copy    snd_copy = fade_out(snd_copy, fade_length)    #calls the function fade_out to modify snd_copy    return snd_copy    #returns the modified sound object with fade in and fade out    #effect                                                                                    